<h2>
Userstanding Layouts : Part 1 - horizontal and vertical layouts
</h2>

<p class='major'>
In Part 1 you'll learn how to apply basic horizontal and vertical layout rules to containers. In Part 2 you'll learn how to achieve more complex layouts by using a grid system.
</p>  

<h3>
Basic horizontal &amp; vertical layouts
</h3>

<p>
Use layouts as a quick way to define how a parent container arranges its children.
<br/>
<strong>Example: applying a horizontal layout</strong>
</p>

<div class='hbox demo'>
<pre class='lang-less major'><code>
.demo-horizontal-layout{
  #layout.horizontal(12px);
}
</code></pre>
<aside>
  <div class='demo-horizontal-layout'>
    <div class='box'></div>
    <div class='box'></div>
    <div class='box'></div>
  </div>
</aside>
</div>

<p>
<strong>Example: applying a vertical layout</strong>
</p>

<div class='hbox demo'>
<aside>
  <div class='demo-vertical-layout'>
    <div class='box'></div>
    <div class='box'></div>
    <div class='box'></div>
  </div>
</aside>
<pre class=''><code class='language-less'>
.demo-vertical-layout{
  #layout.vertical(12px);
}
</code></pre>
</div>

<h3>
Changing direction : responsive layouts
</h3>

<p class='major'>
</p>

<p>
  Here's a mobile first example of a container that's vertical by default (on small screens) and horizontal at larger widths.

  <strong>Example: a responsive layout</strong>
</p>

<div class='hbox demo'>
<aside>
  <div class='demo-changing-layout'>
    <div class='box'></div>
    <div class='box'></div>
    <div class='box'></div>
  </div>
</aside>
<pre><code class='language-less'>
.demo-changing-layout{
  #layout.vertical(12px);
}

@media all and (min-width: 50em) {
  .demo-changing-layout{
    #layout.horizontal(12px);
  } 
}
</code></pre>
</div>

<h3>
When to use layouts
</h3>

<p>
Use layouts when elements aren't intended to fit precisely end to end inside a container.
</p>

<div class='vbox demo'>
<aside>
  <strong class='positive'>Do</strong> use for simple directional positioning of elements.
  <div class='demo-no-fit-layout'>
    <div class='text-box' data-show-margin-left data-show-margin-right>Menu Item 01</div>
    <div class='text-box' data-show-margin-left data-show-margin-right>Menu Item 02</div>
    <div class='text-box' data-show-margin-left data-show-margin-right>Menu Item 03</div>
    <div class='text-box' data-show-margin-left data-show-margin-right>Long Menu Item 04</div>
  </div>
</aside>
<aside>
  <strong class='negative'>Don't</strong> use when you need to fit items end-to-end using percentages.
  <div class='demo-yes-fit-layout'>
    <div class='text-box' data-show-margin-left data-show-margin-right>width: 25%</div>
    <div class='text-box' data-show-margin-left data-show-margin-right>width: 25%</div>
    <div class='text-box' data-show-margin-left data-show-margin-right>width: 25%</div>
    <div class='text-box' data-show-margin-left data-show-margin-right>width: 25%</div>
  </div>
</aside>
</div>

<p>
<strong>Why layouts don't work with edge to edge positioning.</strong>
<br/>
<br/>
Layouts use margins to define the gutter between items. Margins work great for achieving simple layouts with the minimum amount of markup. The margin technique breaks down when you want to fit columns edge to edge inside a container using percentages.
</p>

<p>
It has to do with how the css box model works. Margins aren't calculated as part of the width or height of each element. Their width is additional. In the example below each item is 25% of the container width <em>but</em> each margin adds another 12px which goes beyond the available 100% width of the container.
</p>

<div class='hbox demo'>
  <aside>
    <div class='demo-margin'>
      <div class='box major' data-show-margin-left data-show-margin-right><span>width: 25%</span></div>
      <div class='box major' data-show-margin-left data-show-margin-right><span>width: 25%</span></div>
      <div class='box major' data-show-margin-left data-show-margin-right><span>width: 25%</span></div>
      <div class='box major' data-show-margin-left data-show-margin-right><span>width: 25%</span></div>
    </div>
  </aside>
</div>

<p>If you want edge to edge positioning, use a grid system.</p>