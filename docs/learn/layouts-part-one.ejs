<h2>
Userstanding Layouts : Part 1 - Basic horizontal and vertical layouts
</h2>

<p class='major'>
In Part 1 you'll learn how to apply basic horizontal and vertical layout rules to containers. In Part 2 you'll learn how to achieve more complex layouts by using a grid system.
</p>  

<h3>
Basic horizontal &amp; vertical layouts
</h3>

<p>
Use layouts as a quick way to define how a parent container arranges its children.
<br/>
<strong>Example: applying a horizontal layout</strong>
</p>

<div class='hbox demo'>
<pre class='lang-less major'><code>
.demo-horizontal-layout{
  #layout.horizontal(12px);
}
</code></pre>
<aside>
  <div class='demo-horizontal-layout'>
    <div class='box'></div>
    <div class='box'></div>
    <div class='box'></div>
  </div>
</aside>
</div>

<p>
<strong>Example: applying a vertical layout</strong>
</p>

<div class='hbox demo'>
<aside>
  <div class='demo-vertical-layout'>
    <div class='box'></div>
    <div class='box'></div>
    <div class='box'></div>
  </div>
</aside>
<pre class=''><code class='language-less'>
.demo-vertical-layout{
  #layout.vertical(12px);
}
</code></pre>
</div>

<h3>
Changing direction : responsive layouts
</h3>

<p class='major'>
</p>

<p>
  Here's a mobile first example of a container that's vertical by default (on small screens) and horizontal at larger widths.

  <strong>Example: a responsive layout</strong>
</p>

<div class='hbox demo'>
<aside>
  <div class='demo-changing-layout'>
    <div class='box'></div>
    <div class='box'></div>
    <div class='box'></div>
  </div>
</aside>
<pre><code class='language-less'>
.demo-changing-layout{
  #layout.vertical(12px);
}

@media all and (min-width: 50em) {
  .demo-changing-layout{
    #layout.horizontal(12px);
  } 
}
</code></pre>
</div>

<h3>
When to use layouts
</h3>

<p>
Use layouts when elements aren't intended to fit precisely end to end inside a container.
</p>

<div class='vbox demo'>
<aside>
  <strong class='positive'>Do</strong> use for simple directional positioning of elements.
  <div class='demo-no-fit-layout'>
    <div class='text-box' data-show-margin-left data-show-margin-right>Menu Item 01</div>
    <div class='text-box' data-show-margin-left data-show-margin-right>Menu Item 02</div>
    <div class='text-box' data-show-margin-left data-show-margin-right>Menu Item 03</div>
    <div class='text-box' data-show-margin-left data-show-margin-right>Long Menu Item 04</div>
  </div>
</aside>
<aside>
  <strong class='negative'>Don't</strong> use when you need to fit items end-to-end using percentages.
  <div class='demo-yes-fit-layout'>
    <div class='text-box' data-show-margin-left data-show-margin-right>width: 25%</div>
    <div class='text-box' data-show-margin-left data-show-margin-right>width: 25%</div>
    <div class='text-box' data-show-margin-left data-show-margin-right>width: 25%</div>
    <div class='text-box' data-show-margin-left data-show-margin-right>width: 25%</div>
  </div>
</aside>
</div>

<p>
Layouts use margins to define the gutter between items. Margins work great for simple layouts and require less markup than a full grid system. The margin technique breaks down when you want to fit columns edge to edge inside a container. Fot that you want to use a proper grid system.
</p>